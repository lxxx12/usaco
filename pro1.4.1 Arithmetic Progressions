/*
ID:lxxxsou1
PROG: ariprog
LANG: C++
*/
#include <iostream>
#include <fstream>
#include <algorithm>
#include<memory.h>

using namespace std;//找出给出M值能找到的所有的双平方数，再找出等差数列中能符合双平方数的首位和方差

int bisquare[125001],length;

void bisquares(int m)
{
    int i,j;
    for(i=0;i<125001;i++)  bisquare[i]=0;
    for(i=0;i<=m;i++)
    {
        for(j=0;j<=m;j++)
            bisquare[i*i+j*j]=1;
    }

}
class Arip
{
public:
    int a;
    int b;
};

bool comp(const Arip & a1, const Arip & a2)
{
  return a1.b < a2.b;
}

int main()
{
    ofstream fout ("ariprog.out");
    ifstream fin ("ariprog.in");
    int n,m;
    int i,j,k,p=0;
    fin>>n;
    fin>>m;
    bisquares(m);
    Arip A[100];
    for(i=0;i<=m*m*2-n;i++)
    {
        for(j=1;j<=((m*m*2-i)/(n-1));j++)
        {
            for(k=0;k<n;k++)
            {
                if(bisquare[i+j*k]==0) break;
            }
            if(k==n)
            {
                A[p].a=i;
                A[p].b=j;
                p++;
            }
        }
    }

    if(p==0)
        fout<<"NONE"<<endl;
    else
    {
        std::sort(A,A+p,comp);
        for(i=0;i<p;i++)
        {
            fout<<A[i].a<<" "<<A[i].b<<endl;
        }
    }
    return 0;
}
